{"ast":null,"code":"// task-manager/frontend/src/config/api.js\nimport axios from'axios';// Detectar automÃ¡ticamente la URL del API\nconst getApiUrl=()=>{// 1) Si viene de .env, Ãºsalo (p.ej. http://19.18.1.101:3001/api)\nif(process.env.REACT_APP_API_URL){return process.env.REACT_APP_API_URL;}// 2) Si estamos en localhost\nconst hostname=window.location.hostname;if(hostname==='localhost'||hostname==='127.0.0.1'){return'http://localhost:3001/api';}// 3) Acceso por IP o dominio: usar esa IP con puerto 3001\nreturn\"http://\".concat(hostname,\":3001/api\");};// Normaliza la base: sin slash final (evita //v1)\nconst API_BASE=getApiUrl().replace(/\\/+$/,'');// Cliente axios Ãºnico\nconst api=axios.create({baseURL:API_BASE,// ej: http://19.18.1.101:3001/api\ntimeout:15000,headers:{'Content-Type':'application/json'}});// Interceptor para exponer mensajes de error amigables\napi.interceptors.response.use(res=>res,err=>{var _err$response,_err$response$data,_err$response$data$er,_err$response2,_err$response2$data;const msg=(err===null||err===void 0?void 0:(_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:(_err$response$data$er=_err$response$data.error)===null||_err$response$data$er===void 0?void 0:_err$response$data$er.message)||(err===null||err===void 0?void 0:(_err$response2=err.response)===null||_err$response2===void 0?void 0:(_err$response2$data=_err$response2.data)===null||_err$response2$data===void 0?void 0:_err$response2$data.error)||err.message||'Error de red';err.userMessage=msg;return Promise.reject(err);});// Para debug\nexport const API_URL=API_BASE;console.log('ðŸ”— API URL configurada:',API_URL);export{api};export default api;","map":{"version":3,"names":["axios","getApiUrl","process","env","REACT_APP_API_URL","hostname","window","location","concat","API_BASE","replace","api","create","baseURL","timeout","headers","interceptors","response","use","res","err","_err$response","_err$response$data","_err$response$data$er","_err$response2","_err$response2$data","msg","data","error","message","userMessage","Promise","reject","API_URL","console","log"],"sources":["C:/Users/Silvia/WebstormProjects/TASK/task-manager/frontend/src/config/api.js"],"sourcesContent":["// task-manager/frontend/src/config/api.js\r\nimport axios from 'axios';\r\n\r\n// Detectar automÃ¡ticamente la URL del API\r\nconst getApiUrl = () => {\r\n    // 1) Si viene de .env, Ãºsalo (p.ej. http://19.18.1.101:3001/api)\r\n    if (process.env.REACT_APP_API_URL) {\r\n        return process.env.REACT_APP_API_URL;\r\n    }\r\n\r\n    // 2) Si estamos en localhost\r\n    const hostname = window.location.hostname;\r\n    if (hostname === 'localhost' || hostname === '127.0.0.1') {\r\n        return 'http://localhost:3001/api';\r\n    }\r\n\r\n    // 3) Acceso por IP o dominio: usar esa IP con puerto 3001\r\n    return `http://${hostname}:3001/api`;\r\n};\r\n\r\n// Normaliza la base: sin slash final (evita //v1)\r\nconst API_BASE = getApiUrl().replace(/\\/+$/, '');\r\n\r\n// Cliente axios Ãºnico\r\nconst api = axios.create({\r\n    baseURL: API_BASE,              // ej: http://19.18.1.101:3001/api\r\n    timeout: 15000,\r\n    headers: { 'Content-Type': 'application/json' },\r\n});\r\n\r\n// Interceptor para exponer mensajes de error amigables\r\napi.interceptors.response.use(\r\n    (res) => res,\r\n    (err) => {\r\n        const msg =\r\n            err?.response?.data?.error?.message ||\r\n            err?.response?.data?.error ||\r\n            err.message ||\r\n            'Error de red';\r\n        err.userMessage = msg;\r\n        return Promise.reject(err);\r\n    }\r\n);\r\n\r\n// Para debug\r\nexport const API_URL = API_BASE;\r\nconsole.log('ðŸ”— API URL configurada:', API_URL);\r\n\r\nexport { api };\r\nexport default api;\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACpB;AACA,GAAIC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAAE,CAC/B,MAAO,CAAAF,OAAO,CAACC,GAAG,CAACC,iBAAiB,CACxC,CAEA;AACA,KAAM,CAAAC,QAAQ,CAAGC,MAAM,CAACC,QAAQ,CAACF,QAAQ,CACzC,GAAIA,QAAQ,GAAK,WAAW,EAAIA,QAAQ,GAAK,WAAW,CAAE,CACtD,MAAO,2BAA2B,CACtC,CAEA;AACA,gBAAAG,MAAA,CAAiBH,QAAQ,cAC7B,CAAC,CAED;AACA,KAAM,CAAAI,QAAQ,CAAGR,SAAS,CAAC,CAAC,CAACS,OAAO,CAAC,MAAM,CAAE,EAAE,CAAC,CAEhD;AACA,KAAM,CAAAC,GAAG,CAAGX,KAAK,CAACY,MAAM,CAAC,CACrBC,OAAO,CAAEJ,QAAQ,CAAe;AAChCK,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAClD,CAAC,CAAC,CAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CACxBC,GAAG,EAAKA,GAAG,CACXC,GAAG,EAAK,KAAAC,aAAA,CAAAC,kBAAA,CAAAC,qBAAA,CAAAC,cAAA,CAAAC,mBAAA,CACL,KAAM,CAAAC,GAAG,CACL,CAAAN,GAAG,SAAHA,GAAG,kBAAAC,aAAA,CAAHD,GAAG,CAAEH,QAAQ,UAAAI,aAAA,kBAAAC,kBAAA,CAAbD,aAAA,CAAeM,IAAI,UAAAL,kBAAA,kBAAAC,qBAAA,CAAnBD,kBAAA,CAAqBM,KAAK,UAAAL,qBAAA,iBAA1BA,qBAAA,CAA4BM,OAAO,IACnCT,GAAG,SAAHA,GAAG,kBAAAI,cAAA,CAAHJ,GAAG,CAAEH,QAAQ,UAAAO,cAAA,kBAAAC,mBAAA,CAAbD,cAAA,CAAeG,IAAI,UAAAF,mBAAA,iBAAnBA,mBAAA,CAAqBG,KAAK,GAC1BR,GAAG,CAACS,OAAO,EACX,cAAc,CAClBT,GAAG,CAACU,WAAW,CAAGJ,GAAG,CACrB,MAAO,CAAAK,OAAO,CAACC,MAAM,CAACZ,GAAG,CAAC,CAC9B,CACJ,CAAC,CAED;AACA,MAAO,MAAM,CAAAa,OAAO,CAAGxB,QAAQ,CAC/ByB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAEF,OAAO,CAAC,CAE/C,OAAStB,GAAG,EACZ,cAAe,CAAAA,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}