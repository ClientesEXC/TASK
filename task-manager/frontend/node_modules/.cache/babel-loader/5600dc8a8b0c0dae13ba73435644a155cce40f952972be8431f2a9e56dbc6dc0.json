{"ast":null,"code":"// task-manager/frontend/src/config/api.js\nimport axios from 'axios';\n\n// Detectar automÃ¡ticamente la URL del API\nconst getApiUrl = () => {\n  // 1) Si viene de .env, Ãºsalo (p.ej. http://19.18.1.101:3001/api)\n  if (process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n\n  // 2) Si estamos en localhost\n  const hostname = window.location.hostname;\n  if (hostname === 'localhost' || hostname === '127.0.0.1') {\n    return 'http://192.168.100.37:3001/api';\n  }\n\n  // 3) Acceso por IP o dominio: usar esa IP con puerto 3001\n  return `http://${hostname}:3001/api`;\n};\n\n// Normaliza la base: sin slash final (evita //v1)\nconst API_BASE = getApiUrl().replace(/\\/+$/, '');\n\n// Cliente axios Ãºnico\nconst api = axios.create({\n  baseURL: API_BASE,\n  // ej: http://19.18.1.101:3001/api\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para exponer mensajes de error amigables\napi.interceptors.response.use(res => res, err => {\n  var _err$response, _err$response$data, _err$response$data$er, _err$response2, _err$response2$data;\n  const msg = (err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : (_err$response$data$er = _err$response$data.error) === null || _err$response$data$er === void 0 ? void 0 : _err$response$data$er.message) || (err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || err.message || 'Error de red';\n  err.userMessage = msg;\n  return Promise.reject(err);\n});\n\n// Para debug\nexport const API_URL = API_BASE;\nconsole.log('ðŸ”— API URL configurada:', API_URL);\nexport { api };\nexport default api;","map":{"version":3,"names":["axios","getApiUrl","process","env","REACT_APP_API_URL","hostname","window","location","API_BASE","replace","api","create","baseURL","timeout","headers","interceptors","response","use","res","err","_err$response","_err$response$data","_err$response$data$er","_err$response2","_err$response2$data","msg","data","error","message","userMessage","Promise","reject","API_URL","console","log"],"sources":["C:/Users/Silvia/WebstormProjects/TASK/task-manager/frontend/src/config/api.js"],"sourcesContent":["// task-manager/frontend/src/config/api.js\r\nimport axios from 'axios';\r\n\r\n// Detectar automÃ¡ticamente la URL del API\r\nconst getApiUrl = () => {\r\n    // 1) Si viene de .env, Ãºsalo (p.ej. http://19.18.1.101:3001/api)\r\n    if (process.env.REACT_APP_API_URL) {\r\n        return process.env.REACT_APP_API_URL;\r\n    }\r\n\r\n    // 2) Si estamos en localhost\r\n    const hostname = window.location.hostname;\r\n    if (hostname === 'localhost' || hostname === '127.0.0.1') {\r\n        return 'http://192.168.100.37:3001/api';\r\n    }\r\n\r\n    // 3) Acceso por IP o dominio: usar esa IP con puerto 3001\r\n    return `http://${hostname}:3001/api`;\r\n};\r\n\r\n// Normaliza la base: sin slash final (evita //v1)\r\nconst API_BASE = getApiUrl().replace(/\\/+$/, '');\r\n\r\n// Cliente axios Ãºnico\r\nconst api = axios.create({\r\n    baseURL: API_BASE,              // ej: http://19.18.1.101:3001/api\r\n    timeout: 15000,\r\n    headers: { 'Content-Type': 'application/json' },\r\n});\r\n\r\n// Interceptor para exponer mensajes de error amigables\r\napi.interceptors.response.use(\r\n    (res) => res,\r\n    (err) => {\r\n        const msg =\r\n            err?.response?.data?.error?.message ||\r\n            err?.response?.data?.error ||\r\n            err.message ||\r\n            'Error de red';\r\n        err.userMessage = msg;\r\n        return Promise.reject(err);\r\n    }\r\n);\r\n\r\n// Para debug\r\nexport const API_URL = API_BASE;\r\nconsole.log('ðŸ”— API URL configurada:', API_URL);\r\n\r\nexport { api };\r\nexport default api;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAE;IAC/B,OAAOF,OAAO,CAACC,GAAG,CAACC,iBAAiB;EACxC;;EAEA;EACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAQ,CAACF,QAAQ;EACzC,IAAIA,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,WAAW,EAAE;IACtD,OAAO,gCAAgC;EAC3C;;EAEA;EACA,OAAO,UAAUA,QAAQ,WAAW;AACxC,CAAC;;AAED;AACA,MAAMG,QAAQ,GAAGP,SAAS,CAAC,CAAC,CAACQ,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;;AAEhD;AACA,MAAMC,GAAG,GAAGV,KAAK,CAACW,MAAM,CAAC;EACrBC,OAAO,EAAEJ,QAAQ;EAAe;EAChCK,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IAAE,cAAc,EAAE;EAAmB;AAClD,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CACxBC,GAAG,IAAKA,GAAG,EACXC,GAAG,IAAK;EAAA,IAAAC,aAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,cAAA,EAAAC,mBAAA;EACL,MAAMC,GAAG,GACL,CAAAN,GAAG,aAAHA,GAAG,wBAAAC,aAAA,GAAHD,GAAG,CAAEH,QAAQ,cAAAI,aAAA,wBAAAC,kBAAA,GAAbD,aAAA,CAAeM,IAAI,cAAAL,kBAAA,wBAAAC,qBAAA,GAAnBD,kBAAA,CAAqBM,KAAK,cAAAL,qBAAA,uBAA1BA,qBAAA,CAA4BM,OAAO,MACnCT,GAAG,aAAHA,GAAG,wBAAAI,cAAA,GAAHJ,GAAG,CAAEH,QAAQ,cAAAO,cAAA,wBAAAC,mBAAA,GAAbD,cAAA,CAAeG,IAAI,cAAAF,mBAAA,uBAAnBA,mBAAA,CAAqBG,KAAK,KAC1BR,GAAG,CAACS,OAAO,IACX,cAAc;EAClBT,GAAG,CAACU,WAAW,GAAGJ,GAAG;EACrB,OAAOK,OAAO,CAACC,MAAM,CAACZ,GAAG,CAAC;AAC9B,CACJ,CAAC;;AAED;AACA,OAAO,MAAMa,OAAO,GAAGxB,QAAQ;AAC/ByB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,OAAO,CAAC;AAE/C,SAAStB,GAAG;AACZ,eAAeA,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}